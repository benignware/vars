@import './lib/map';
@import './lib/string';

$--varss--data: () !global;

$var-prefix: '' !default;
$var-style: camelCase !default;
$var-sets: false !default;

@mixin var-set($name, $value: null, $style: $var-style, $prefix: $var-prefix, $sets: $var-sets) {
  $line-break: '\D\A';
  $vars: if(type-of($name) == 'map' or type-of($name) == 'list', $name, (
    '#{$name}': $value
  ));

  $vars-cast: ();
  @each $name, $value in $vars {
    $vars-cast: map-merge($vars-cast, (
      '#{$name}': $value
    ));
  }

  $--varss--data: map-merge($--varss--data, $vars-cast) !global;

  @if ($sets == null) {
    $vars-cast: varss--map-flatten($vars-cast);
  }

  @each $name, $value in $vars-cast {
    $key: if($style == camelCase, varss--string-camelize($name), $key);
    $var: --#{$prefix}#{$key};

    @if ($sets and type-of($value) == 'map') {
      $map: if($style == camelCase, varss--map-camelize-keys($value), $value);
      $string: inspect($map);
      $string: "#{varss--string-replace($string, ', ', ';\D\A')}";
      $string: str-slice($string, 2, str-length($string) - 1);
      #{$var}: #{unquote("{\D\A" + $string + "\D\A}")};
    } @else {
      #{$var}: #{$value};
    }
  }
}

@function var-get($name, $style: $var-style, $prefix: $var-prefix, $vars: $--varss--data) {
  $var: map-get($--varss--data, quote($name));
  @if $var {
    @if type-of($var) == 'map' or type-of($var) == 'list' {
      $result: ();

      @each $key, $value in $var {
        $child-prefix: $prefix + $name + '-';

        @if $style == camelCase {
          $child-prefix: $prefix + varss--string-camelize($name);
        }

        $rec-value: var-get($key, $style: $style, $prefix: $child-prefix, $vars: $var);

        $result: map-merge($result, (
          #{$key}: $rec-value
        ));
      }

      @return $result;
    }
  }

  @if str-length($prefix) > 0 {
    $exclude: ' ', '-', '–', '—', '_', ',', ';', ':', '.';
    $char: str-slice($prefix, str-length($prefix));

    @if not varss--string-contain($exclude, $char) {
      $name: varss--string-capitalize($name);
    }
  }

  $value: var(--#{$prefix}#{$name});

  @return $value;
}
